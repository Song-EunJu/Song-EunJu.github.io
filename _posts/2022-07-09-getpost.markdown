## HTTP의 GET과 POST 비교

[참고] 
https://hongsii.github.io/2017/08/02/what-is-the-difference-get-and-post/

### GET : 서버로부터 정보 조회
- 요청하는 데이터가 Header 부분에 url이 담겨서 전송된다.
- url 이라는 공간에 담겨가므로 전송할 수 있는 데이터 크기가 제한적
- 데이터가 url 에 그대로 노출되므로 보안이 필요할 땐 사용하면 안됨
- 서버에서 데이터를 가져와서 보여주는 용도 (SELECT 성격)
- 브라우저에서 `caching 가능`하므로 post 보다 빠름
	
    - js/css/이미지와 같은 정적컨텐츠는 데이터 양이 크고, 변경될 일이 적어서 반복해서 동일한 요청을 보낼 필요가 없음 
    → `정적 컨텐츠`를 요청하면 브라우저에서 요청 캐시해두고, 동일한 요청 발생 시 캐시된 데이터 사용
- Idempotent 멱등하게 설계 (설계원칙에 따라 서버의 데이터나 상태를 변경시키지 않아야 멱등하기 때문에 주로 **조회시 사용**)

### POST : 리소스 생성/변경하기 위해 설계
- 데이터가 Body 부분에 담겨서 전송
- 데이터 크기가 GET 방식보다 크고 보안면에서 나음 (Body는 길이의 제한 없이 데이터 전송 가능)
- 서버의 값이나 상태 변경 or 추가
- Non-idempotent 하게 설계 


> `Idempotent(멱등)` : **동일한 연산**을 여러번 수행하더라도 **동일한 결과**가 나타나야 함